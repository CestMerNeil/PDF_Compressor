name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `${context.ref.replace(/refs\/tags\//, '')}`,
              name: `PDF Compressor ${context.ref.replace(/refs\/tags\//, '')}`,
              body: `## PDF Compressor Release ${context.ref.replace(/refs\/tags\//, '')}
            
            ### ✨ Features
            - **Professional PDF Compression**: Multiple quality presets for different use cases
            - **Built-in Engine**: No external dependencies like Ghostscript required
            - **Modern Interface**: Clean, minimalist design with professional workflow
            - **Cross-platform**: Native apps for Windows, macOS, and Linux
            
            ### 📊 Compression Levels
            - **Screen (72 DPI)**: Maximum compression for web sharing and email
            - **eBook (150 DPI)**: Balanced quality for document reading and storage
            - **Printer (300 DPI)**: High quality for office printing and documents
            - **Prepress (300+ DPI)**: Professional printing and commercial use
            
            ### 💾 Installation
            
            #### Windows
            - **Recommended**: Download \`.msi\` installer for automatic installation
            - **Alternative**: Download \`.exe\` portable installer
            
            #### macOS
            - Download \`.dmg\` file and drag PDF Compressor to Applications folder
            - **Note**: You may need to right-click and select "Open" first time due to security settings
            
            #### Linux
            - **AppImage**: Download \`.AppImage\` file, make executable, and run directly
            - **Debian/Ubuntu**: Download \`.deb\` file and install with \`sudo dpkg -i filename.deb\`
            
            ### 🛠️ Technical Details
            - Built with **Tauri** (Rust + Web frontend) for optimal performance and security
            - Uses **lopdf** library for native PDF processing
            - **React** + **TypeScript** + **Tailwind CSS** + **DaisyUI** for modern UI
            - Zero external runtime dependencies
            
            ### 🔒 Security
            - All processing happens locally on your machine
            - No data is sent to external servers
            - Open source - you can review the code
            
            ---
            
            **Full Changelog**: https://github.com/${{ context.repo.owner }}/${{ context.repo.repo }}/compare/v1.0.0...${context.ref.replace(/refs\/tags\//, '')}`,
              draft: false,
              prerelease: false
            });
            return data.id

  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' 
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-20.04'
            args: ''
          - platform: 'windows-latest'
            args: '--target x86_64-pc-windows-msvc'

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install frontend dependencies
        run: yarn install --frozen-lockfile

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: ${{ matrix.args }}